// Brick Breaker Game using GLUT and OpenGL
// Paddle enlargement power-ups, 10 lives, dark blue background, bricks with 1 hit each
#include <iostream>
#include <GL/glut.h>
#include <vector>
#include <cstdlib>
#include <ctime>
#include <cmath>
#include <cstdio>
#include <string>
#include <algorithm>
#include <windows.h>
#include <mmsystem.h>
#pragma comment(lib, "winmm.lib")

// Window size
const int width = 800;
const int height = 600;

// Paddle
float paddleX = width / 2 - 50;
float paddleWidth = 100;
const float paddleHeight = 20;
const float paddleY = 50;
const float paddleSpeed = 20;

// Ball struct
struct Ball {
    float x, y;
    float speedX, speedY;
    float radius;
    float colorAngle = 0.0f;
};
std::vector<Ball> balls = {{width / 2, height / 2, 5, 5, 10}};

// Particle struct for debris and celebration
struct Particle {
    float x, y;
    float dx, dy;
    float life;
    bool isCelebration = false;
};
std::vector<Particle> particles;

// Bricks
const int rows = 5;
const int cols = 10;
const int brickWidth = 70;
const int brickHeight = 25;
std::vector<std::vector<int>> bricks;
std::vector<std::vector<float>> brickOpacity;

// Score, lives, and game state
int score = 0;
int lives = 10;
bool gameWon = false;
bool gameLost = false;
bool showWinMessage = false;
bool showLoseMessage = false;
bool winSoundPlayed = false;
bool loseSoundPlayed = false;

// Fixed colors for brick rows (red, yellow, blue, green, purple)
float brickColors[rows][3] = {
    {1.0f, 0.0f, 0.0f},   // Red
    {1.0f, 1.0f, 0.0f},   // Yellow
    {0.0f, 0.0f, 1.0f},   // Blue
    {0.0f, 1.0f, 0.0f},   // Green
    {0.6f, 0.0f, 0.6f}    // Purple
};

// Draw rectangle with opacity
void drawRect(float x, float y, float w, float h, float r, float g, float b, float alpha = 1.0f) {
    glColor4f(r, g, b, alpha);
    glBegin(GL_QUADS);
    glVertex2f(x, y);
    glVertex2f(x + w, y);
    glVertex2f(x + w, y + h);
    glVertex2f(x, y + h);
    glEnd();
}

// Draw text
void drawText(float x, float y, const std::string& text) {
    glRasterPos2f(x, y);
    for (char c : text) {
        glutBitmapCharacter(GLUT_BITMAP_HELVETICA_18, c);
    }
}

// Draw ball with color spin
void drawBall(Ball& ball) {
    ball.colorAngle += 0.05f;
    float r = fabs(sin(ball.colorAngle));
    float g = fabs(sin(ball.colorAngle + 2.0f));
    float b = fabs(sin(ball.colorAngle + 4.0f));

    glColor3f(r, g, b);
    glBegin(GL_TRIANGLE_FAN);
    glVertex2f(ball.x, ball.y);
    for (int i = 0; i <= 100; ++i) {
        float angle = 2 * 3.14159f * i / 100;
        glVertex2f(ball.x + cos(angle) * ball.radius, ball.y + sin(angle) * ball.radius);
    }
    glEnd();
}

// Draw particles
void drawParticles() {
    for (auto& p : particles) {
        if (p.isCelebration)
            glColor3f(fabs(sin(p.x)), fabs(sin(p.y)), fabs(sin(p.life)));
        else
            glColor3f(1, 1, 1);

        glBegin(GL_POINTS);
        glVertex2f(p.x, p.y);
        glEnd();
    }
}

// Initialize bricks with hit points 1 and opacity 1.0
void initBricks() {
    bricks = std::vector<std::vector<int>>(rows, std::vector<int>(cols, 1));
    brickOpacity = std::vector<std::vector<float>>(rows, std::vector<float>(cols, 1.0f));
}

// Display function
void display() {
    glClearColor(0.0f, 0.0f, 0.3f, 1.0f);
    glClear(GL_COLOR_BUFFER_BIT);
    glEnable(GL_BLEND);
    glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);

    if (showWinMessage) {
        glColor3f(1, 1, 0);
        drawText(width / 2 - 50, height / 2, "YOU WIN!");
    }
    if (showLoseMessage) {
        glColor3f(1, 0, 0);
        drawText(width / 2 - 50, height / 2, "YOU LOST!");
    }

    drawRect(paddleX, paddleY, paddleWidth, paddleHeight, 0.2f, 0.6f, 1.0f);
    for (Ball& ball : balls) drawBall(ball);
    drawParticles();

    for (int i = 0; i < rows; ++i) {
        float r = brickColors[i][0];
        float g = brickColors[i][1];
        float b = brickColors[i][2];
        for (int j = 0; j < cols; ++j) {
            if (bricks[i][j] > 0 || brickOpacity[i][j] > 0.0f) {
                float x = 60 + j * (brickWidth + 10);
                float y = height - 50 - i * (brickHeight + 10);
                drawRect(x, y, brickWidth, brickHeight, r, g, b, brickOpacity[i][j]);
            }
        }
    }

    glColor3f(1, 1, 1);
    drawText(10, height - 20, "Score: " + std::to_string(score) + " | Lives: " + std::to_string(lives));
    glutSwapBuffers();
}

// Ball movement and collision
void update(int value) {
    for (Particle& p : particles) {
        p.x += p.dx;
        p.y += p.dy;
        p.life -= 0.02f;
    }
    particles.erase(std::remove_if(particles.begin(), particles.end(), [](const Particle& p) {
        return p.life <= 0;
    }), particles.end());

    for (int i = 0; i < rows; ++i)
        for (int j = 0; j < cols; ++j)
            if (bricks[i][j] == 0 && brickOpacity[i][j] > 0.0f)
                brickOpacity[i][j] -= 0.05f;

    for (Ball& ball : balls) {
        ball.x += ball.speedX;
        ball.y += ball.speedY;

        if (ball.x < ball.radius || ball.x > width - ball.radius) ball.speedX = -ball.speedX;
        if (ball.y > height - ball.radius) ball.speedY = -ball.speedY;

        if (ball.y - ball.radius < paddleY + paddleHeight &&
            ball.x > paddleX && ball.x < paddleX + paddleWidth &&
            ball.y > paddleY) {
            ball.speedY = -ball.speedY;
            ball.y = paddleY + paddleHeight + ball.radius;
        }

        for (int i = 0; i < rows; ++i) {
            for (int j = 0; j < cols; ++j) {
                if (bricks[i][j] > 0) {
                    float x = 60 + j * (brickWidth + 10);
                    float y = height - 50 - i * (brickHeight + 10);
                    if (ball.x + ball.radius > x && ball.x - ball.radius < x + brickWidth &&
                        ball.y + ball.radius > y && ball.y - ball.radius < y + brickHeight) {

                        ball.speedY = -ball.speedY;
                        bricks[i][j] = 0;
                        score += 10;

                        for (int k = 0; k < 20; ++k) {
                            float angle = static_cast<float>(rand()) / RAND_MAX * 2 * 3.14159f;
                            float speed = static_cast<float>(rand()) / RAND_MAX * 2.0f + 1.0f;
                            particles.push_back({ball.x, ball.y, cos(angle) * speed, sin(angle) * speed, 1.0f});
                        }

                        PlaySound("C:\\Windows\\Media\\notify.wav", NULL, SND_FILENAME | SND_ASYNC);

                        if ((rand() % 10) == 0) {
                            paddleWidth += 15;
                            if (paddleWidth > 200) paddleWidth = 200;
                        }
                    }
                }
            }
        }
    }

    auto it = std::remove_if(balls.begin(), balls.end(), [](const Ball& b) { return b.y < 0; });
    if (it != balls.end()) {
        int lostBalls = std::distance(it, balls.end());
        balls.erase(it, balls.end());
        lives -= lostBalls;
    }

    if (balls.empty() && lives > 0) {
        balls.push_back({width / 2, height / 2, 5, 5, 10});
        paddleWidth = 100;
    }

    if (lives <= 0 && !loseSoundPlayed) {
        gameLost = true;
        showLoseMessage = true;
        PlaySound("C:\\Windows\\Media\\Windows Error.wav", NULL, SND_FILENAME | SND_ASYNC);
        loseSoundPlayed = true;
    }

    bool allBricksCleared = true;
    for (const auto& row : bricks) for (int brick : row) if (brick > 0) allBricksCleared = false;
    if (allBricksCleared && !winSoundPlayed) {
        gameWon = true;
        showWinMessage = true;
        PlaySound("C:\\Windows\\Media\\tada.wav", NULL, SND_FILENAME | SND_ASYNC);
        winSoundPlayed = true;
        for (int i = 0; i < 200; ++i) {
            float x = rand() % width;
            float y = rand() % 100 + height / 2;
            float dx = ((rand() % 100) / 50.0f - 1) * 2;
            float dy = ((rand() % 100) / 50.0f) * 3 + 1;
            particles.push_back({x, y, dx, dy, 1.5f, true});
        }
    }

    glutPostRedisplay();
    glutTimerFunc(16, update, 0);
}

// Keyboard controls
void keyboard(int key, int, int) {
    if (key == GLUT_KEY_LEFT) {
        paddleX -= paddleSpeed;
        if (paddleX < 0) paddleX = 0;
    } else if (key == GLUT_KEY_RIGHT) {
        paddleX += paddleSpeed;
        if (paddleX + paddleWidth > width) paddleX = width - paddleWidth;
    }
    glutPostRedisplay();
}

// Main function
int main(int argc, char **argv) {
    srand(time(0));
    initBricks();
    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_DOUBLE | GLUT_RGB);
    glutInitWindowSize(width, height);
    glutCreateWindow("Polished Brick Breaker");
    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    gluOrtho2D(0, width, 0, height);

    glutDisplayFunc(display);
    glutSpecialFunc(keyboard);
    glutTimerFunc(0, update, 0);
    glutMainLoop();
    return 0;
}

